const { Telegraf, Markup, session } = require('telegraf');
require('dotenv').config();

const userStates = new Map(); // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const { bot, handleWebhook, setupWebhook } = require('./webhookHandler');
const { 
  greetingHandler, mainMenu, catalog, catalog2, 
  inlineButtons, galery, galery2, galery3, galery4, galery5, galery6, galery7,
  timetable, timetable2, aboutUs, faqHandler, faqHandler2 
} = require('./greeting');
const { payments } = require('./paymentsHandler');
const connectDB = require('./database');
const User = require('./userModel');
const createRedirectMiddleware = require('./redirectHandler');
const paymentService = require('./paymentsHandler');
// const PaymentService = require('./paymentsHandler');
// const paymentService = new PaymentService();

const YOUR_TELEGRAM_ID = process.env.YOUR_TELEGRAM_ID;

// –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(session());


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
setupWebhook();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connectDB().then(() => {
  console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.');
}).catch(error => {
  console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
  process.exit(1);
});

// –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å—Ç–∞–≤–ª—è–µ–º –ü–ï–†–í–´–ú –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
// await broadcast.sendToAll("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", {
  //   parse_mode: 'HTML' // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  // });
  
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
  bot.start(greetingHandler);
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  bot.use(createRedirectMiddleware(YOUR_TELEGRAM_ID));
bot.hears('–û–ø–ª–∞—Ç–∞', async (ctx) => {
  try {
    const userId = ctx.from.id;
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const payment = await paymentService.createPayment(
      '10.00', 
      `–û–ø–ª–∞—Ç–∞ –æ—Ç @${ctx.from.username || userId}`,
      userId
    );

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ session —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!ctx.session) ctx.session = {};
    ctx.session.paymentOperationId = payment.operation_id;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    await ctx.replyWithMarkdown(
      `üìå *–°—á—ë—Ç –Ω–∞ ${payment.amount} —Ä—É–±.*\n` +
      `[–û–ø–ª–∞—Ç–∏—Ç—å](${payment.payment_url})`,
      Markup.inlineKeyboard([
        Markup.button.url('üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', payment.payment_url),
        Markup.button.callback('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', 'check_payment')
      ])
    );
    
  } catch (error) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    console.error('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã:', error);
  }
});

bot.action('check_payment', async (ctx) => {
  try {
    await ctx.answerCbQuery('–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É...');
    const payment = await paymentService.checkPayment(ctx.from.id);
    
    if (payment) {
      await ctx.reply(`‚úÖ –ü–ª–∞—Ç—ë–∂ –Ω–∞ ${payment.amount} —Ä—É–±. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!`);
    } else {
      await ctx.reply('‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
    }
    
  } catch (error) {
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ');
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
  }
});

setInterval(async () => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
}, 300000);

bot.hears('‚ò∞ –í –º–µ–Ω—é', mainMenu);
bot.hears('üóÇÔ∏è–ö–∞—Ç–∞–ª–æ–≥', catalog);
bot.hears('–ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞?', catalog2);
bot.hears('‚ùìFAQ', faqHandler);
bot.hears('–°–º–æ—Ç—Ä–µ—Ç—å FAQ', faqHandler2);
bot.hears('üïò–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', timetable);
bot.hears('–°–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë', timetable2);
bot.hears('–û –Ω–∞—Å\n–ö–æ–Ω—Ç–∞–∫—Ç—ã', aboutUs);
bot.hears('üéûÔ∏è–ì–∞–ª–µ—Ä–µ—è', async (ctx) => {
  const userId = ctx.message.from.id;
  userStates.set(userId, 1);
  await galery(ctx);
});

bot.action('inlineButton', inlineButtons);

bot.telegram.setMyCommands([
  { command: 'menu', description: '‚ò∞ –í –º–µ–Ω—é' },
  { command: 'contact', description: 'üßû –ö–æ–Ω—Ç–∞–∫—Ç—ã' },
  { command: 'faq', description: '‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã' }
]);

bot.command('menu', (ctx) => mainMenu(ctx));
bot.command('contact', (ctx) => aboutUs(ctx));
bot.command('faq', (ctx) => faqHandler(ctx));

bot.on('text', async (ctx) => {
  try {
    const text = ctx.message.text.trim().toLowerCase();
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text);
    const userId = ctx.message.from.id;

    if (/–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–º–µ–Ω—é/i.test(text)) {
      await greetingHandler(ctx);
    } else if (/–¥–∞—Ç|—Ü–µ–Ω/i.test(text)) {
      await datesPriceHandler(ctx);
    } else if (/–∫–∞—Ç–∞–ª–æ–≥|—Ç—É—Ä/i.test(text)) {
      await catalogHandler(ctx);
    } else if (/–≤–æ–ø—Ä–æ—Å|—Å–ø—Ä–æ—Å–∏—Ç—å/i.test(text)) {
      await faqHandler(ctx);
    } else if (text === '–¥–∞–ª–µ–µ ‚ûú') {
      let galleryStep = userStates.get(userId) || 0;

      const gallerySteps = [galery2, galery3, galery4, galery5, galery6, galery7];
      if (galleryStep < gallerySteps.length) {
        await gallerySteps[galleryStep](ctx);
        userStates.set(userId, galleryStep + 1);
      } else {
        userStates.set(userId, 0);
      }
    } else {
      await ctx.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏. üòä');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
});

exports.handler = handleWebhook;
