// const axios = require('axios');
// const crypto = require('crypto');
// require('dotenv').config();

// const YOOMONEY_API_URL = 'https://yoomoney.ru/api';

// class PaymentService {
//   constructor() {
//     if (!process.env.YOOMONEY_WALLET || !process.env.YOOMONEY_ACCESS_TOKEN) {
//       throw new Error('–ÆMoney credentials not configured');
//     }
//     this.commissionPercent = 2; // –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ (2%)
//   }

//   // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
//   calculateAmountWithCommission(amount) {
//     const commission = amount * (this.commissionPercent / 100);
//     return (amount + commission).toFixed(2);
//   }

//   async createPayment(amount, description, userId) {
//     try {
//       // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —Å –∫–æ–º–∏—Å—Å–∏–µ–π
//       const amountWithCommission = this.calculateAmountWithCommission(amount);
      
//       // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
//       const operationId = `tg_${userId}_${Date.now()}`;
      
//       // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É —Å –∫–æ–º–∏—Å—Å–∏–µ–π
//       const paymentUrl = new URL('https://yoomoney.ru/quickpay/confirm.xml');
//       paymentUrl.searchParams.append('receiver', process.env.YOOMONEY_WALLET);
//       paymentUrl.searchParams.append('quickpay-form', 'small');
//       paymentUrl.searchParams.append('targets', description);
//       paymentUrl.searchParams.append('paymentType', 'AC'); // AC - –∫–∞—Ä—Ç–∞, PC - –∫–æ—à–µ–ª–µ–∫
//       paymentUrl.searchParams.append('sum', amountWithCommission);
//       paymentUrl.searchParams.append('label', operationId);
      
//       return {
//         payment_url: paymentUrl.toString(),
//         original_amount: amount,
//         amount_with_commission: amountWithCommission,
//         commission_percent: this.commissionPercent,
//         operation_id: operationId
//       };
      
//     } catch (error) {
//       console.error('Payment creation error:', error);
//       throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
//     }
//   }

//   async checkPayment(userId) {
//     try {
//       const response = await axios.get(`${YOOMONEY_API_URL}/operation-history`, {
//         headers: {
//           'Authorization': `Bearer ${process.env.YOOMONEY_ACCESS_TOKEN}` 
//         },
//         params: {
//           label: `tg_${userId}_`,
//           type: 'in',
//           records: 10
//         }
//       });

//       const successfulPayments = response.data.operations.filter(
//         op => op.status === 'success' && op.label.startsWith(`tg_${userId}_`)
//       );

//       return successfulPayments.length > 0 ? successfulPayments[0] : null;
      
//     } catch (error) {
//       console.error('Payment check error:', error.response?.data || error.message);
//       throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞');
//     }
//   }
// }

// module.exports = new PaymentService();



const { Telegraf } = require('telegraf');
const moment = require('moment-timezone');

const createRedirectMiddleware = (yourTelegramId) => {
  return async (ctx, next) => {
    try {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞
      if (!ctx.message || (!ctx.message.text && !ctx.message.audio && !ctx.message.voice && !ctx.message.photo && !ctx.message.video && !ctx.message.document)) {
        return await next();
      }

      const { from, message } = ctx;
      const isCommand = message.text && message.text.startsWith('/');
      const isMedia = message.audio || message.voice || message.photo || message.video || message.document;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —Å–≤—è–∑–∞–Ω–æ —Å –æ–ø–ª–∞—Ç–æ–π
      const isGreeting = message.text && message.text.includes('/start');
      const isPaymentRelated = message.text && (
        message.text.toLowerCase().includes('–æ–ø–ª–∞—Ç') || 
        message.text.toLowerCase().includes('payment') ||
        message.text.toLowerCase().includes('pay') ||
        message.text.toLowerCase().includes('–∫—É–ø–∏—Ç') ||
        message.text.toLowerCase().includes('buy')
      );

      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –æ–ø–ª–∞—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (!isGreeting && !isPaymentRelated) {
        return await next();
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const eventData = {
        userId: from.id,
        username: from.username || '–ù–µ—Ç username',
        firstName: from.first_name || '–ù–µ—Ç –∏–º–µ–Ω–∏',
        lastName: from.last_name || '–ù–µ—Ç —Ñ–∞–º–∏–ª–∏–∏',
        date: moment(message.date * 1000).tz('Europe/Moscow').format('YYYY-MM-DD HH:mm:ss'),
        type: '—Ç–µ–∫—Å—Ç',
        content: message.text || '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ'
      };

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      if (message.audio) {
        eventData.type = '–∞—É–¥–∏–æ';
        eventData.content = `–ê—É–¥–∏–æ: ${message.audio.file_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`;
      } else if (message.voice) {
        eventData.type = '–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
        eventData.content = '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
      } else if (message.photo) {
        eventData.type = '—Ñ–æ—Ç–æ';
        eventData.content = '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è';
      } else if (message.video) {
        eventData.type = '–≤–∏–¥–µ–æ';
        eventData.content = `–í–∏–¥–µ–æ: ${message.video.file_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`;
      } else if (message.document) {
        eventData.type = '–¥–æ–∫—É–º–µ–Ω—Ç';
        eventData.content = `–î–æ–∫—É–º–µ–Ω—Ç: ${message.document.file_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ —Ç–∏–ø–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageType = isGreeting ? 'üëã GREETING' : 'üí∞ PAYMENT';
      const notificationText = `${messageType}\nüì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @${eventData.username} (${eventData.firstName} ${eventData.lastName}) –≤ ${eventData.date}:\n–¢–∏–ø: ${eventData.type}\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${eventData.content}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await ctx.telegram.sendMessage(yourTelegramId, notificationText);

      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (isMedia) {
        try {
          await ctx.forwardMessage(yourTelegramId);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞ :', error);
          await ctx.telegram.sendMessage(yourTelegramId, `‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ (${eventData.type})`);
        }
      }

      await next();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ redirectMiddleware:', error);
    }
  };
};

module.exports = createRedirectMiddleware;